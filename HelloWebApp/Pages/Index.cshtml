@page
@model HelloWebApp.Pages.IndexModel
@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="~/css/styles.css" />
<!-- Include Material Icons CDN for icons -->
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">

<div class="main-container">
    <h1>Search App</h1>

    <div id="currentTime" class="time-display"></div>

    <div class="search-section">
        <input type="text" id="searchTerm" placeholder="Search..." />
        <button id="searchButton">Search</button>
        <button id="microphoneButton" aria-label="Voice Search">🎤</button>
    </div>

    <div id="searchResults" class="search-results"></div>

    <h2>Todo List</h2>
    <div class="todo-section">
        <input type="text" id="todoInput" placeholder="Add new task" />
        <button id="addTodoButton">Add</button>
        <ul id="todoList"></ul>
    </div>
</div>

<footer>
    <p>&copy; 2024 HelloWebApp. All rights reserved.</p>
    <div class="social-icons">
        <a href="https://www.gmail.com" target="_blank" aria-label="Gmail">
            <span class="material-icons" style="color: #2d2b2a;">mail</span> <!-- Gmail icon -->
        </a>
        <a href="https://www.instagram.com" target="_blank" aria-label="Instagram">
            <span class="material-icons" style="color: #322f31;">camera_alt</span> <!-- Instagram icon -->
        </a>
    </div>
</footer>

@section Scripts {
    <script>
        // Function to perform search
        function performSearch() {
            const term = document.getElementById("searchTerm").value;
            if (!term) {
                alert("Please enter a search term.");
                return;
            }

            fetch(`http://localhost:3001/search?query=${encodeURIComponent(term)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    const items = data.organic_results || [];
                    const resultDiv = document.getElementById("searchResults");
                    resultDiv.innerHTML = items.length > 0 
                        ? items.map(item => `<p><a href="${item.link}" target="_blank">${item.title}</a></p>`).join('')
                        : "<p>No results found.</p>";
                })
                .catch(error => {
                    console.error("Error fetching search results:", error);
                    document.getElementById("searchResults").innerHTML = `<p>Error: ${error.message}</p>`;
                });
        }

        // Attach event listener for the Enter key
        document.getElementById("searchTerm").addEventListener("keypress", function(event) {
            if (event.key === "Enter") {
                performSearch();
            }
        });

        // Update the click event for the search button
        document.getElementById("searchButton").onclick = performSearch;

        // Speech-to-text functionality
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

        if (SpeechRecognition) {
            const recognition = new SpeechRecognition();

            recognition.onstart = function() {
                console.log("Voice recognition started. Speak into the microphone.");
            };

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById("searchTerm").value = transcript; // Set the transcript to the input
                performSearch(); // Perform search automatically
            };

            recognition.onerror = function(event) {
                console.error("Error occurred in recognition: " + event.error);
            };

            // Attach microphone button event
            document.getElementById("microphoneButton").onclick = function() {
                recognition.start();
            };
        } else {
            console.log("Speech recognition not supported in this browser.");
        }

        // Current Time Functionality
        function updateTime() {
            const now = new Date();
            const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
            document.getElementById("currentTime").innerText = now.toLocaleString('en-US', options);
        }
        setInterval(updateTime, 1000);

        // Todo List Functionality
        document.getElementById("addTodoButton").onclick = function() {
    const todoInput = document.getElementById("todoInput");
    const todoText = todoInput.value.trim();
    if (todoText) {
        const todoList = document.getElementById("todoList");
        const newTodoItem = document.createElement("li");

        // Create a span for the todo text
        const todoSpan = document.createElement("span");
        todoSpan.textContent = todoText;

        // Create delete icon only (without a button)
        const deleteIcon = document.createElement("span");
        deleteIcon.className = "material-icons";
        deleteIcon.style.fontSize = "16px";
        deleteIcon.style.color = "red";
        deleteIcon.style.cursor = "pointer"; // Make it look clickable
        deleteIcon.innerText = "delete"; // Material icon for delete

        // Attach click event to the delete icon
        deleteIcon.onclick = function() {
            todoList.removeChild(newTodoItem);
        };

        // Append elements to new todo item
        newTodoItem.appendChild(todoSpan);
        newTodoItem.appendChild(deleteIcon);
        todoList.appendChild(newTodoItem);
        todoInput.value = ""; // Clear input
    } else {
        alert("Please enter a task.");
    }
};
    </script>
}
